// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FPSPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FPSPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FPSPacket {

namespace {

const ::google::protobuf::Descriptor* MSG_PLAYER_MOVE_UPDATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_PLAYER_MOVE_UPDATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_PLAYER_LOOK_UPDATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_PLAYER_LOOK_UPDATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_PLAYER_HEALTH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_PLAYER_HEALTH_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_PLAYER_SCORE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_PLAYER_SCORE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_PLAYER_WEAPON_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_PLAYER_WEAPON_CHANGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_PLAYER_WEAPON_CHANGING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_PLAYER_WEAPON_CHANGING_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_SPAWN_PLAYER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_SPAWN_PLAYER_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FPSPacket_2eproto() {
  protobuf_AddDesc_FPSPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FPSPacket.proto");
  GOOGLE_CHECK(file != NULL);
  MSG_PLAYER_MOVE_UPDATE_descriptor_ = file->message_type(0);
  static const int MSG_PLAYER_MOVE_UPDATE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_MOVE_UPDATE, moveupdate_),
  };
  MSG_PLAYER_MOVE_UPDATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_PLAYER_MOVE_UPDATE_descriptor_,
      MSG_PLAYER_MOVE_UPDATE::default_instance_,
      MSG_PLAYER_MOVE_UPDATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_MOVE_UPDATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_MOVE_UPDATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_PLAYER_MOVE_UPDATE));
  MSG_PLAYER_LOOK_UPDATE_descriptor_ = file->message_type(1);
  static const int MSG_PLAYER_LOOK_UPDATE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_LOOK_UPDATE, lookupdate_),
  };
  MSG_PLAYER_LOOK_UPDATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_PLAYER_LOOK_UPDATE_descriptor_,
      MSG_PLAYER_LOOK_UPDATE::default_instance_,
      MSG_PLAYER_LOOK_UPDATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_LOOK_UPDATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_LOOK_UPDATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_PLAYER_LOOK_UPDATE));
  MSG_PLAYER_HEALTH_descriptor_ = file->message_type(2);
  static const int MSG_PLAYER_HEALTH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_HEALTH, playerhealth_),
  };
  MSG_PLAYER_HEALTH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_PLAYER_HEALTH_descriptor_,
      MSG_PLAYER_HEALTH::default_instance_,
      MSG_PLAYER_HEALTH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_HEALTH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_HEALTH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_PLAYER_HEALTH));
  MSG_PLAYER_SCORE_descriptor_ = file->message_type(3);
  static const int MSG_PLAYER_SCORE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_SCORE, playerscore_),
  };
  MSG_PLAYER_SCORE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_PLAYER_SCORE_descriptor_,
      MSG_PLAYER_SCORE::default_instance_,
      MSG_PLAYER_SCORE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_SCORE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_SCORE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_PLAYER_SCORE));
  MSG_PLAYER_WEAPON_CHANGE_descriptor_ = file->message_type(4);
  static const int MSG_PLAYER_WEAPON_CHANGE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_WEAPON_CHANGE, weaponchange_),
  };
  MSG_PLAYER_WEAPON_CHANGE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_PLAYER_WEAPON_CHANGE_descriptor_,
      MSG_PLAYER_WEAPON_CHANGE::default_instance_,
      MSG_PLAYER_WEAPON_CHANGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_WEAPON_CHANGE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_WEAPON_CHANGE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_PLAYER_WEAPON_CHANGE));
  MSG_PLAYER_WEAPON_CHANGING_descriptor_ = file->message_type(5);
  static const int MSG_PLAYER_WEAPON_CHANGING_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_WEAPON_CHANGING, weaponchanging_),
  };
  MSG_PLAYER_WEAPON_CHANGING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_PLAYER_WEAPON_CHANGING_descriptor_,
      MSG_PLAYER_WEAPON_CHANGING::default_instance_,
      MSG_PLAYER_WEAPON_CHANGING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_WEAPON_CHANGING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_PLAYER_WEAPON_CHANGING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_PLAYER_WEAPON_CHANGING));
  MSG_SPAWN_PLAYER_descriptor_ = file->message_type(6);
  static const int MSG_SPAWN_PLAYER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SPAWN_PLAYER, spawnplayer_),
  };
  MSG_SPAWN_PLAYER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_SPAWN_PLAYER_descriptor_,
      MSG_SPAWN_PLAYER::default_instance_,
      MSG_SPAWN_PLAYER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SPAWN_PLAYER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SPAWN_PLAYER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_SPAWN_PLAYER));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FPSPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_PLAYER_MOVE_UPDATE_descriptor_, &MSG_PLAYER_MOVE_UPDATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_PLAYER_LOOK_UPDATE_descriptor_, &MSG_PLAYER_LOOK_UPDATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_PLAYER_HEALTH_descriptor_, &MSG_PLAYER_HEALTH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_PLAYER_SCORE_descriptor_, &MSG_PLAYER_SCORE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_PLAYER_WEAPON_CHANGE_descriptor_, &MSG_PLAYER_WEAPON_CHANGE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_PLAYER_WEAPON_CHANGING_descriptor_, &MSG_PLAYER_WEAPON_CHANGING::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_SPAWN_PLAYER_descriptor_, &MSG_SPAWN_PLAYER::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FPSPacket_2eproto() {
  delete MSG_PLAYER_MOVE_UPDATE::default_instance_;
  delete MSG_PLAYER_MOVE_UPDATE_reflection_;
  delete MSG_PLAYER_LOOK_UPDATE::default_instance_;
  delete MSG_PLAYER_LOOK_UPDATE_reflection_;
  delete MSG_PLAYER_HEALTH::default_instance_;
  delete MSG_PLAYER_HEALTH_reflection_;
  delete MSG_PLAYER_SCORE::default_instance_;
  delete MSG_PLAYER_SCORE_reflection_;
  delete MSG_PLAYER_WEAPON_CHANGE::default_instance_;
  delete MSG_PLAYER_WEAPON_CHANGE_reflection_;
  delete MSG_PLAYER_WEAPON_CHANGING::default_instance_;
  delete MSG_PLAYER_WEAPON_CHANGING_reflection_;
  delete MSG_SPAWN_PLAYER::default_instance_;
  delete MSG_SPAWN_PLAYER_reflection_;
}

void protobuf_AddDesc_FPSPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017FPSPacket.proto\022\tFPSPacket\",\n\026MSG_PLAY"
    "ER_MOVE_UPDATE\022\022\n\nmoveupdate\030\001 \002(\014\",\n\026MS"
    "G_PLAYER_LOOK_UPDATE\022\022\n\nlookupdate\030\001 \002(\014"
    "\")\n\021MSG_PLAYER_HEALTH\022\024\n\014playerhealth\030\001 "
    "\002(\014\"\'\n\020MSG_PLAYER_SCORE\022\023\n\013PlayerScore\030\001"
    " \002(\014\"0\n\030MSG_PLAYER_WEAPON_CHANGE\022\024\n\014Weap"
    "onChange\030\001 \002(\014\"4\n\032MSG_PLAYER_WEAPON_CHAN"
    "GING\022\026\n\016WeaponChanging\030\001 \002(\014\"\'\n\020MSG_SPAW"
    "N_PLAYER\022\023\n\013SpawnPlayer\030\001 \002(\014", 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FPSPacket.proto", &protobuf_RegisterTypes);
  MSG_PLAYER_MOVE_UPDATE::default_instance_ = new MSG_PLAYER_MOVE_UPDATE();
  MSG_PLAYER_LOOK_UPDATE::default_instance_ = new MSG_PLAYER_LOOK_UPDATE();
  MSG_PLAYER_HEALTH::default_instance_ = new MSG_PLAYER_HEALTH();
  MSG_PLAYER_SCORE::default_instance_ = new MSG_PLAYER_SCORE();
  MSG_PLAYER_WEAPON_CHANGE::default_instance_ = new MSG_PLAYER_WEAPON_CHANGE();
  MSG_PLAYER_WEAPON_CHANGING::default_instance_ = new MSG_PLAYER_WEAPON_CHANGING();
  MSG_SPAWN_PLAYER::default_instance_ = new MSG_SPAWN_PLAYER();
  MSG_PLAYER_MOVE_UPDATE::default_instance_->InitAsDefaultInstance();
  MSG_PLAYER_LOOK_UPDATE::default_instance_->InitAsDefaultInstance();
  MSG_PLAYER_HEALTH::default_instance_->InitAsDefaultInstance();
  MSG_PLAYER_SCORE::default_instance_->InitAsDefaultInstance();
  MSG_PLAYER_WEAPON_CHANGE::default_instance_->InitAsDefaultInstance();
  MSG_PLAYER_WEAPON_CHANGING::default_instance_->InitAsDefaultInstance();
  MSG_SPAWN_PLAYER::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FPSPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FPSPacket_2eproto {
  StaticDescriptorInitializer_FPSPacket_2eproto() {
    protobuf_AddDesc_FPSPacket_2eproto();
  }
} static_descriptor_initializer_FPSPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MSG_PLAYER_MOVE_UPDATE::kMoveupdateFieldNumber;
#endif  // !_MSC_VER

MSG_PLAYER_MOVE_UPDATE::MSG_PLAYER_MOVE_UPDATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_PLAYER_MOVE_UPDATE::InitAsDefaultInstance() {
}

MSG_PLAYER_MOVE_UPDATE::MSG_PLAYER_MOVE_UPDATE(const MSG_PLAYER_MOVE_UPDATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_PLAYER_MOVE_UPDATE::SharedCtor() {
  _cached_size_ = 0;
  moveupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_PLAYER_MOVE_UPDATE::~MSG_PLAYER_MOVE_UPDATE() {
  SharedDtor();
}

void MSG_PLAYER_MOVE_UPDATE::SharedDtor() {
  if (moveupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete moveupdate_;
  }
  if (this != default_instance_) {
  }
}

void MSG_PLAYER_MOVE_UPDATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_PLAYER_MOVE_UPDATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_MOVE_UPDATE_descriptor_;
}

const MSG_PLAYER_MOVE_UPDATE& MSG_PLAYER_MOVE_UPDATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_PLAYER_MOVE_UPDATE* MSG_PLAYER_MOVE_UPDATE::default_instance_ = NULL;

MSG_PLAYER_MOVE_UPDATE* MSG_PLAYER_MOVE_UPDATE::New() const {
  return new MSG_PLAYER_MOVE_UPDATE;
}

void MSG_PLAYER_MOVE_UPDATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_moveupdate()) {
      if (moveupdate_ != &::google::protobuf::internal::kEmptyString) {
        moveupdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_PLAYER_MOVE_UPDATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes moveupdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_moveupdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_PLAYER_MOVE_UPDATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes moveupdate = 1;
  if (has_moveupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->moveupdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_PLAYER_MOVE_UPDATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes moveupdate = 1;
  if (has_moveupdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->moveupdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_PLAYER_MOVE_UPDATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes moveupdate = 1;
    if (has_moveupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->moveupdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_PLAYER_MOVE_UPDATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_PLAYER_MOVE_UPDATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_PLAYER_MOVE_UPDATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_PLAYER_MOVE_UPDATE::MergeFrom(const MSG_PLAYER_MOVE_UPDATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moveupdate()) {
      set_moveupdate(from.moveupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_PLAYER_MOVE_UPDATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_MOVE_UPDATE::CopyFrom(const MSG_PLAYER_MOVE_UPDATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_MOVE_UPDATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_PLAYER_MOVE_UPDATE::Swap(MSG_PLAYER_MOVE_UPDATE* other) {
  if (other != this) {
    std::swap(moveupdate_, other->moveupdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_PLAYER_MOVE_UPDATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_PLAYER_MOVE_UPDATE_descriptor_;
  metadata.reflection = MSG_PLAYER_MOVE_UPDATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_PLAYER_LOOK_UPDATE::kLookupdateFieldNumber;
#endif  // !_MSC_VER

MSG_PLAYER_LOOK_UPDATE::MSG_PLAYER_LOOK_UPDATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_PLAYER_LOOK_UPDATE::InitAsDefaultInstance() {
}

MSG_PLAYER_LOOK_UPDATE::MSG_PLAYER_LOOK_UPDATE(const MSG_PLAYER_LOOK_UPDATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_PLAYER_LOOK_UPDATE::SharedCtor() {
  _cached_size_ = 0;
  lookupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_PLAYER_LOOK_UPDATE::~MSG_PLAYER_LOOK_UPDATE() {
  SharedDtor();
}

void MSG_PLAYER_LOOK_UPDATE::SharedDtor() {
  if (lookupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete lookupdate_;
  }
  if (this != default_instance_) {
  }
}

void MSG_PLAYER_LOOK_UPDATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_PLAYER_LOOK_UPDATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_LOOK_UPDATE_descriptor_;
}

const MSG_PLAYER_LOOK_UPDATE& MSG_PLAYER_LOOK_UPDATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_PLAYER_LOOK_UPDATE* MSG_PLAYER_LOOK_UPDATE::default_instance_ = NULL;

MSG_PLAYER_LOOK_UPDATE* MSG_PLAYER_LOOK_UPDATE::New() const {
  return new MSG_PLAYER_LOOK_UPDATE;
}

void MSG_PLAYER_LOOK_UPDATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lookupdate()) {
      if (lookupdate_ != &::google::protobuf::internal::kEmptyString) {
        lookupdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_PLAYER_LOOK_UPDATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes lookupdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lookupdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_PLAYER_LOOK_UPDATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes lookupdate = 1;
  if (has_lookupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->lookupdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_PLAYER_LOOK_UPDATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes lookupdate = 1;
  if (has_lookupdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->lookupdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_PLAYER_LOOK_UPDATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes lookupdate = 1;
    if (has_lookupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lookupdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_PLAYER_LOOK_UPDATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_PLAYER_LOOK_UPDATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_PLAYER_LOOK_UPDATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_PLAYER_LOOK_UPDATE::MergeFrom(const MSG_PLAYER_LOOK_UPDATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lookupdate()) {
      set_lookupdate(from.lookupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_PLAYER_LOOK_UPDATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_LOOK_UPDATE::CopyFrom(const MSG_PLAYER_LOOK_UPDATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_LOOK_UPDATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_PLAYER_LOOK_UPDATE::Swap(MSG_PLAYER_LOOK_UPDATE* other) {
  if (other != this) {
    std::swap(lookupdate_, other->lookupdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_PLAYER_LOOK_UPDATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_PLAYER_LOOK_UPDATE_descriptor_;
  metadata.reflection = MSG_PLAYER_LOOK_UPDATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_PLAYER_HEALTH::kPlayerhealthFieldNumber;
#endif  // !_MSC_VER

MSG_PLAYER_HEALTH::MSG_PLAYER_HEALTH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_PLAYER_HEALTH::InitAsDefaultInstance() {
}

MSG_PLAYER_HEALTH::MSG_PLAYER_HEALTH(const MSG_PLAYER_HEALTH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_PLAYER_HEALTH::SharedCtor() {
  _cached_size_ = 0;
  playerhealth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_PLAYER_HEALTH::~MSG_PLAYER_HEALTH() {
  SharedDtor();
}

void MSG_PLAYER_HEALTH::SharedDtor() {
  if (playerhealth_ != &::google::protobuf::internal::kEmptyString) {
    delete playerhealth_;
  }
  if (this != default_instance_) {
  }
}

void MSG_PLAYER_HEALTH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_PLAYER_HEALTH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_HEALTH_descriptor_;
}

const MSG_PLAYER_HEALTH& MSG_PLAYER_HEALTH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_PLAYER_HEALTH* MSG_PLAYER_HEALTH::default_instance_ = NULL;

MSG_PLAYER_HEALTH* MSG_PLAYER_HEALTH::New() const {
  return new MSG_PLAYER_HEALTH;
}

void MSG_PLAYER_HEALTH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerhealth()) {
      if (playerhealth_ != &::google::protobuf::internal::kEmptyString) {
        playerhealth_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_PLAYER_HEALTH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes playerhealth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerhealth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_PLAYER_HEALTH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes playerhealth = 1;
  if (has_playerhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->playerhealth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_PLAYER_HEALTH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes playerhealth = 1;
  if (has_playerhealth()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->playerhealth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_PLAYER_HEALTH::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes playerhealth = 1;
    if (has_playerhealth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playerhealth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_PLAYER_HEALTH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_PLAYER_HEALTH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_PLAYER_HEALTH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_PLAYER_HEALTH::MergeFrom(const MSG_PLAYER_HEALTH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerhealth()) {
      set_playerhealth(from.playerhealth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_PLAYER_HEALTH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_HEALTH::CopyFrom(const MSG_PLAYER_HEALTH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_HEALTH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_PLAYER_HEALTH::Swap(MSG_PLAYER_HEALTH* other) {
  if (other != this) {
    std::swap(playerhealth_, other->playerhealth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_PLAYER_HEALTH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_PLAYER_HEALTH_descriptor_;
  metadata.reflection = MSG_PLAYER_HEALTH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_PLAYER_SCORE::kPlayerScoreFieldNumber;
#endif  // !_MSC_VER

MSG_PLAYER_SCORE::MSG_PLAYER_SCORE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_PLAYER_SCORE::InitAsDefaultInstance() {
}

MSG_PLAYER_SCORE::MSG_PLAYER_SCORE(const MSG_PLAYER_SCORE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_PLAYER_SCORE::SharedCtor() {
  _cached_size_ = 0;
  playerscore_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_PLAYER_SCORE::~MSG_PLAYER_SCORE() {
  SharedDtor();
}

void MSG_PLAYER_SCORE::SharedDtor() {
  if (playerscore_ != &::google::protobuf::internal::kEmptyString) {
    delete playerscore_;
  }
  if (this != default_instance_) {
  }
}

void MSG_PLAYER_SCORE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_PLAYER_SCORE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_SCORE_descriptor_;
}

const MSG_PLAYER_SCORE& MSG_PLAYER_SCORE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_PLAYER_SCORE* MSG_PLAYER_SCORE::default_instance_ = NULL;

MSG_PLAYER_SCORE* MSG_PLAYER_SCORE::New() const {
  return new MSG_PLAYER_SCORE;
}

void MSG_PLAYER_SCORE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerscore()) {
      if (playerscore_ != &::google::protobuf::internal::kEmptyString) {
        playerscore_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_PLAYER_SCORE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes PlayerScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_PLAYER_SCORE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes PlayerScore = 1;
  if (has_playerscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->playerscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_PLAYER_SCORE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes PlayerScore = 1;
  if (has_playerscore()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->playerscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_PLAYER_SCORE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes PlayerScore = 1;
    if (has_playerscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playerscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_PLAYER_SCORE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_PLAYER_SCORE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_PLAYER_SCORE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_PLAYER_SCORE::MergeFrom(const MSG_PLAYER_SCORE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerscore()) {
      set_playerscore(from.playerscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_PLAYER_SCORE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_SCORE::CopyFrom(const MSG_PLAYER_SCORE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_SCORE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_PLAYER_SCORE::Swap(MSG_PLAYER_SCORE* other) {
  if (other != this) {
    std::swap(playerscore_, other->playerscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_PLAYER_SCORE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_PLAYER_SCORE_descriptor_;
  metadata.reflection = MSG_PLAYER_SCORE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_PLAYER_WEAPON_CHANGE::kWeaponChangeFieldNumber;
#endif  // !_MSC_VER

MSG_PLAYER_WEAPON_CHANGE::MSG_PLAYER_WEAPON_CHANGE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_PLAYER_WEAPON_CHANGE::InitAsDefaultInstance() {
}

MSG_PLAYER_WEAPON_CHANGE::MSG_PLAYER_WEAPON_CHANGE(const MSG_PLAYER_WEAPON_CHANGE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_PLAYER_WEAPON_CHANGE::SharedCtor() {
  _cached_size_ = 0;
  weaponchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_PLAYER_WEAPON_CHANGE::~MSG_PLAYER_WEAPON_CHANGE() {
  SharedDtor();
}

void MSG_PLAYER_WEAPON_CHANGE::SharedDtor() {
  if (weaponchange_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponchange_;
  }
  if (this != default_instance_) {
  }
}

void MSG_PLAYER_WEAPON_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_PLAYER_WEAPON_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_WEAPON_CHANGE_descriptor_;
}

const MSG_PLAYER_WEAPON_CHANGE& MSG_PLAYER_WEAPON_CHANGE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_PLAYER_WEAPON_CHANGE* MSG_PLAYER_WEAPON_CHANGE::default_instance_ = NULL;

MSG_PLAYER_WEAPON_CHANGE* MSG_PLAYER_WEAPON_CHANGE::New() const {
  return new MSG_PLAYER_WEAPON_CHANGE;
}

void MSG_PLAYER_WEAPON_CHANGE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_weaponchange()) {
      if (weaponchange_ != &::google::protobuf::internal::kEmptyString) {
        weaponchange_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_PLAYER_WEAPON_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes WeaponChange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weaponchange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_PLAYER_WEAPON_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes WeaponChange = 1;
  if (has_weaponchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->weaponchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_PLAYER_WEAPON_CHANGE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes WeaponChange = 1;
  if (has_weaponchange()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->weaponchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_PLAYER_WEAPON_CHANGE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes WeaponChange = 1;
    if (has_weaponchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weaponchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_PLAYER_WEAPON_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_PLAYER_WEAPON_CHANGE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_PLAYER_WEAPON_CHANGE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_PLAYER_WEAPON_CHANGE::MergeFrom(const MSG_PLAYER_WEAPON_CHANGE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponchange()) {
      set_weaponchange(from.weaponchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_PLAYER_WEAPON_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_WEAPON_CHANGE::CopyFrom(const MSG_PLAYER_WEAPON_CHANGE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_WEAPON_CHANGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_PLAYER_WEAPON_CHANGE::Swap(MSG_PLAYER_WEAPON_CHANGE* other) {
  if (other != this) {
    std::swap(weaponchange_, other->weaponchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_PLAYER_WEAPON_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_PLAYER_WEAPON_CHANGE_descriptor_;
  metadata.reflection = MSG_PLAYER_WEAPON_CHANGE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_PLAYER_WEAPON_CHANGING::kWeaponChangingFieldNumber;
#endif  // !_MSC_VER

MSG_PLAYER_WEAPON_CHANGING::MSG_PLAYER_WEAPON_CHANGING()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_PLAYER_WEAPON_CHANGING::InitAsDefaultInstance() {
}

MSG_PLAYER_WEAPON_CHANGING::MSG_PLAYER_WEAPON_CHANGING(const MSG_PLAYER_WEAPON_CHANGING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_PLAYER_WEAPON_CHANGING::SharedCtor() {
  _cached_size_ = 0;
  weaponchanging_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_PLAYER_WEAPON_CHANGING::~MSG_PLAYER_WEAPON_CHANGING() {
  SharedDtor();
}

void MSG_PLAYER_WEAPON_CHANGING::SharedDtor() {
  if (weaponchanging_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponchanging_;
  }
  if (this != default_instance_) {
  }
}

void MSG_PLAYER_WEAPON_CHANGING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_PLAYER_WEAPON_CHANGING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_WEAPON_CHANGING_descriptor_;
}

const MSG_PLAYER_WEAPON_CHANGING& MSG_PLAYER_WEAPON_CHANGING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_PLAYER_WEAPON_CHANGING* MSG_PLAYER_WEAPON_CHANGING::default_instance_ = NULL;

MSG_PLAYER_WEAPON_CHANGING* MSG_PLAYER_WEAPON_CHANGING::New() const {
  return new MSG_PLAYER_WEAPON_CHANGING;
}

void MSG_PLAYER_WEAPON_CHANGING::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_weaponchanging()) {
      if (weaponchanging_ != &::google::protobuf::internal::kEmptyString) {
        weaponchanging_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_PLAYER_WEAPON_CHANGING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes WeaponChanging = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weaponchanging()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_PLAYER_WEAPON_CHANGING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes WeaponChanging = 1;
  if (has_weaponchanging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->weaponchanging(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_PLAYER_WEAPON_CHANGING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes WeaponChanging = 1;
  if (has_weaponchanging()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->weaponchanging(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_PLAYER_WEAPON_CHANGING::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes WeaponChanging = 1;
    if (has_weaponchanging()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weaponchanging());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_PLAYER_WEAPON_CHANGING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_PLAYER_WEAPON_CHANGING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_PLAYER_WEAPON_CHANGING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_PLAYER_WEAPON_CHANGING::MergeFrom(const MSG_PLAYER_WEAPON_CHANGING& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponchanging()) {
      set_weaponchanging(from.weaponchanging());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_PLAYER_WEAPON_CHANGING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_WEAPON_CHANGING::CopyFrom(const MSG_PLAYER_WEAPON_CHANGING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_WEAPON_CHANGING::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_PLAYER_WEAPON_CHANGING::Swap(MSG_PLAYER_WEAPON_CHANGING* other) {
  if (other != this) {
    std::swap(weaponchanging_, other->weaponchanging_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_PLAYER_WEAPON_CHANGING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_PLAYER_WEAPON_CHANGING_descriptor_;
  metadata.reflection = MSG_PLAYER_WEAPON_CHANGING_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_SPAWN_PLAYER::kSpawnPlayerFieldNumber;
#endif  // !_MSC_VER

MSG_SPAWN_PLAYER::MSG_SPAWN_PLAYER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_SPAWN_PLAYER::InitAsDefaultInstance() {
}

MSG_SPAWN_PLAYER::MSG_SPAWN_PLAYER(const MSG_SPAWN_PLAYER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_SPAWN_PLAYER::SharedCtor() {
  _cached_size_ = 0;
  spawnplayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_SPAWN_PLAYER::~MSG_SPAWN_PLAYER() {
  SharedDtor();
}

void MSG_SPAWN_PLAYER::SharedDtor() {
  if (spawnplayer_ != &::google::protobuf::internal::kEmptyString) {
    delete spawnplayer_;
  }
  if (this != default_instance_) {
  }
}

void MSG_SPAWN_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_SPAWN_PLAYER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_SPAWN_PLAYER_descriptor_;
}

const MSG_SPAWN_PLAYER& MSG_SPAWN_PLAYER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FPSPacket_2eproto();
  return *default_instance_;
}

MSG_SPAWN_PLAYER* MSG_SPAWN_PLAYER::default_instance_ = NULL;

MSG_SPAWN_PLAYER* MSG_SPAWN_PLAYER::New() const {
  return new MSG_SPAWN_PLAYER;
}

void MSG_SPAWN_PLAYER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spawnplayer()) {
      if (spawnplayer_ != &::google::protobuf::internal::kEmptyString) {
        spawnplayer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_SPAWN_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes SpawnPlayer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spawnplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_SPAWN_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes SpawnPlayer = 1;
  if (has_spawnplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->spawnplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_SPAWN_PLAYER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes SpawnPlayer = 1;
  if (has_spawnplayer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->spawnplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_SPAWN_PLAYER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes SpawnPlayer = 1;
    if (has_spawnplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spawnplayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_SPAWN_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_SPAWN_PLAYER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_SPAWN_PLAYER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_SPAWN_PLAYER::MergeFrom(const MSG_SPAWN_PLAYER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawnplayer()) {
      set_spawnplayer(from.spawnplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_SPAWN_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SPAWN_PLAYER::CopyFrom(const MSG_SPAWN_PLAYER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SPAWN_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_SPAWN_PLAYER::Swap(MSG_SPAWN_PLAYER* other) {
  if (other != this) {
    std::swap(spawnplayer_, other->spawnplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_SPAWN_PLAYER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_SPAWN_PLAYER_descriptor_;
  metadata.reflection = MSG_SPAWN_PLAYER_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FPSPacket

// @@protoc_insertion_point(global_scope)
