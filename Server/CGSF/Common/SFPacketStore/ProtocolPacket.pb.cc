// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtocolPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtocolPacket {

namespace {

const ::google::protobuf::Descriptor* Sample1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sample2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sample3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sample4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample4_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtocolPacket_2eproto() {
  protobuf_AddDesc_ProtocolPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtocolPacket.proto");
  GOOGLE_CHECK(file != NULL);
  Sample1_descriptor_ = file->message_type(0);
  static const int Sample1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample1, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample1, move_),
  };
  Sample1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample1_descriptor_,
      Sample1::default_instance_,
      Sample1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample1));
  Sample2_descriptor_ = file->message_type(1);
  static const int Sample2_offsets_[1] = {
  };
  Sample2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample2_descriptor_,
      Sample2::default_instance_,
      Sample2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample2));
  Sample3_descriptor_ = file->message_type(2);
  static const int Sample3_offsets_[1] = {
  };
  Sample3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample3_descriptor_,
      Sample3::default_instance_,
      Sample3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample3));
  Sample4_descriptor_ = file->message_type(3);
  static const int Sample4_offsets_[1] = {
  };
  Sample4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample4_descriptor_,
      Sample4::default_instance_,
      Sample4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample4));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtocolPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample1_descriptor_, &Sample1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample2_descriptor_, &Sample2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample3_descriptor_, &Sample3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample4_descriptor_, &Sample4::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtocolPacket_2eproto() {
  delete Sample1::default_instance_;
  delete Sample1_reflection_;
  delete Sample2::default_instance_;
  delete Sample2_reflection_;
  delete Sample3::default_instance_;
  delete Sample3_reflection_;
  delete Sample4::default_instance_;
  delete Sample4_reflection_;
}

void protobuf_AddDesc_ProtocolPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtocolPacket.proto\022\016ProtocolPacket\"&"
    "\n\007Sample1\022\r\n\005speed\030\001 \002(\002\022\014\n\004move\030\002 \002(\002\"\t"
    "\n\007Sample2\"\t\n\007Sample3\"\t\n\007Sample4", 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtocolPacket.proto", &protobuf_RegisterTypes);
  Sample1::default_instance_ = new Sample1();
  Sample2::default_instance_ = new Sample2();
  Sample3::default_instance_ = new Sample3();
  Sample4::default_instance_ = new Sample4();
  Sample1::default_instance_->InitAsDefaultInstance();
  Sample2::default_instance_->InitAsDefaultInstance();
  Sample3::default_instance_->InitAsDefaultInstance();
  Sample4::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtocolPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtocolPacket_2eproto {
  StaticDescriptorInitializer_ProtocolPacket_2eproto() {
    protobuf_AddDesc_ProtocolPacket_2eproto();
  }
} static_descriptor_initializer_ProtocolPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Sample1::kSpeedFieldNumber;
const int Sample1::kMoveFieldNumber;
#endif  // !_MSC_VER

Sample1::Sample1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample1::InitAsDefaultInstance() {
}

Sample1::Sample1(const Sample1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample1::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  move_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample1::~Sample1() {
  SharedDtor();
}

void Sample1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample1_descriptor_;
}

const Sample1& Sample1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolPacket_2eproto();
  return *default_instance_;
}

Sample1* Sample1::default_instance_ = NULL;

Sample1* Sample1::New() const {
  return new Sample1;
}

void Sample1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speed_ = 0;
    move_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_move;
        break;
      }

      // required float move = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &move_)));
          set_has_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sample1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required float move = 2;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->move(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required float move = 2;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->move(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float speed = 1;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required float move = 2;
    if (has_move()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample1::MergeFrom(const Sample1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_move()) {
      set_move(from.move());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample1::CopyFrom(const Sample1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Sample1::Swap(Sample1* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(move_, other->move_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample1_descriptor_;
  metadata.reflection = Sample1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Sample2::Sample2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample2::InitAsDefaultInstance() {
}

Sample2::Sample2(const Sample2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample2::~Sample2() {
  SharedDtor();
}

void Sample2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample2_descriptor_;
}

const Sample2& Sample2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolPacket_2eproto();
  return *default_instance_;
}

Sample2* Sample2::default_instance_ = NULL;

Sample2* Sample2::New() const {
  return new Sample2;
}

void Sample2::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Sample2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample2::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample2::MergeFrom(const Sample2& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample2::CopyFrom(const Sample2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample2::IsInitialized() const {

  return true;
}

void Sample2::Swap(Sample2* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample2_descriptor_;
  metadata.reflection = Sample2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Sample3::Sample3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample3::InitAsDefaultInstance() {
}

Sample3::Sample3(const Sample3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample3::~Sample3() {
  SharedDtor();
}

void Sample3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample3_descriptor_;
}

const Sample3& Sample3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolPacket_2eproto();
  return *default_instance_;
}

Sample3* Sample3::default_instance_ = NULL;

Sample3* Sample3::New() const {
  return new Sample3;
}

void Sample3::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Sample3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample3::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample3::MergeFrom(const Sample3& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample3::CopyFrom(const Sample3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample3::IsInitialized() const {

  return true;
}

void Sample3::Swap(Sample3* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample3_descriptor_;
  metadata.reflection = Sample3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Sample4::Sample4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample4::InitAsDefaultInstance() {
}

Sample4::Sample4(const Sample4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample4::~Sample4() {
  SharedDtor();
}

void Sample4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample4_descriptor_;
}

const Sample4& Sample4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolPacket_2eproto();
  return *default_instance_;
}

Sample4* Sample4::default_instance_ = NULL;

Sample4* Sample4::New() const {
  return new Sample4;
}

void Sample4::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Sample4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample4::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample4::MergeFrom(const Sample4& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample4::CopyFrom(const Sample4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample4::IsInitialized() const {

  return true;
}

void Sample4::Swap(Sample4* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample4_descriptor_;
  metadata.reflection = Sample4_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtocolPacket

// @@protoc_insertion_point(global_scope)
